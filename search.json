[{"path":"https://truenomad.github.io/AgePopDenom/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 AgePopDenom authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using AgePopDenom","text":"AgePopDenom R package designed geostatistical modeling fine-scale population age structures. combining nationally representative survey data (e.g., DHS), geospatial rasters (e.g., population density), administrative shapefiles, produces single-year age distributions high spatial resolution. vignette walks installing AgePopDenom, setting project directory, running modeling workflow, creating outputs predictive rasters age pyramids. key advantage AgePopDenom simplicity. init() run_full_workflow() functions handle everything data retrieval model fitting result generation, making much easier produce fine-scale demographic maps public health development applications. Whether need incorporate custom covariates use population rasters, package flexible supports wide range user inputs.","code":""},{"path":[]},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"system-requirements","dir":"Articles","previous_headings":"Installation","what":"System Requirements","title":"Using AgePopDenom","text":"installing AgePopDenom, ensure system meets following requirements: R version: >= 4.1.0 C++ compiler: C++17 compatible TMB (Template Model Builder)","code":""},{"path":[]},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"windows","dir":"Articles","previous_headings":"Installation > System Requirements > Platform-Specific Setup","what":"Windows","title":"Using AgePopDenom","text":"Install Rtools (matches R version): FALSE, download install Rtools : CRAN Rtools macOS Install Command Line Tools: Alternatively, install gcc via Homebrew: Linux (Ubuntu/Debian) Update system install necessary packages:","code":"# Check if Rtools is installed and properly configured pkgbuild::has_build_tools() xcode-select --install brew install gcc sudo apt-get update sudo apt-get install build-essential libxml2-dev"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"agepopdenom-installation","dir":"Articles","previous_headings":"Installation","what":"AgePopDenom installation","title":"Using AgePopDenom","text":"setup complete, follow instructions download AgePopDenom Note: AgePopDenom currently development. available CRAN, able install using following command: get development version GitHub, use: load R:","code":"# install.packages(\"AgePopDenom\") # install.packages(\"devtools\") devtools::install_github(\"truenomad/AgePopDenom\") library(AgePopDenom)"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"workflow-overview","dir":"Articles","previous_headings":"","what":"Workflow Overview","title":"Using AgePopDenom","text":"AgePopDenom provides streamlined workflow generate age-specific population estimates 5 km x 5 km resolution (default). main steps : 1. Initialize project 2. Obtain organize data (survey data, population rasters, shapefiles) 3. Run geostatistical model 4. Generate spatial predictions 5. Export visualize results. typical usage pipeline.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"initialize-a-project","dir":"Articles","previous_headings":"Workflow Overview","what":"1. Initialize a Project","title":"Using AgePopDenom","text":"starting, ensure RStudio project set . help organize analysis outputs single, self-contained directory. RStudio project essential maintaining reproducibility keeping workflow organized. RStudio project created, initialize project folder structure create key scripts running: init() function sets project’s directory structure creates necessary script templates. executed, creates standardized folder hierarchy organizes data, scripts, outputs. function accepts several parameters customize setup: r_script_name: Names main R script (defaults “full_pipeline.R”) cpp_script_name: Names C++ model script (defaults “model.cpp”) open_r_script: Controls whether R script opens automatically creation setup_rscript: Determines R script include template code resulting directory structure includes: two scripts: full_pipeline.R (orchestrates entire analysis) model.cpp (C++ model fast optimization)","code":"init(   r_script_name = \"full_pipeline.R\",   cpp_script_name = \"model.cpp\",   open_r_script = FALSE ) 01_data/   1a_survey_data/     processed/     raw/   1b_rasters/     urban_extent/     pop_raster/   1c_shapefiles/ 02_scripts/ 03_outputs/   3a_model_outputs/   3b_visualizations/   3c_table_outputs/   3d_compiled_results/"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"gather-data","dir":"Articles","previous_headings":"Workflow Overview","what":"2. Gather data","title":"Using AgePopDenom","text":"can download place survey data 01_data/1a_survey_data/processed/. survey data contain least: lat, lon location age_in_years individual urban indicator (available) download DHS data, : Next, retrieve shapefiles (e.g., boundaries): Obtain population rasters (e.g., WorldPop): Extract urban extent (included AgePopDenom supply ):","code":"download_dhs_datasets(   country_codes = c(\"GMB\"),   email = \"my_email@example.com\",   project = \"Population project\" )  process_dhs_data() download_shapefile(\"GMB\") download_pop_rasters(\"GMB\") extract_afurextent()"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"run-the-full-workflow","dir":"Articles","previous_headings":"Workflow Overview","what":"3. Run the Full Workflow","title":"Using AgePopDenom","text":"Use run_full_workflow() fit spatial model, predict gamma parameters, generate aggregated outputs: call run_full_workflow(\"country_code\"), AgePopDenom executes following sub-functions sequence:","code":"run_full_workflow(\"GMB\")"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"i--fit_spatial_model","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3i. fit_spatial_model()","title":"Using AgePopDenom","text":"fit_spatial_model() fits parameter-based geostatistical model using Template Model Builder (C++). reads survey data, estimates Gamma shape (α) scale (λ) parameters cluster, accounting spatial correlation via distance matrix. function fits parameter-based geostatistical model using Template Model Builder (TMB). Parameters: country_code: ISO3 country code (e.g., “GMB”) data: Survey data frame containing: lat, lon: Geographic coordinates age_in_years: Individual ages urban: Urban/rural indicator (0/1) scale_outcome: Column name log scale parameter shape_outcome: Column name log shape parameter covariates: Vector covariate names cpp_script_name: Path TMB C++ script output_dir: Directory model outputs manual_params: Optional list manual parameter values: beta1: Vector coefficients scale model beta2: Vector coefficients shape model gamma: Spatial correlation parameter log_sigma2: Log spatial variance log_phi: Log spatial range parameter log_tau2_1: Log nugget variance control_params: Optional list optimization control parameters: trace: Level output (0-6) maxit: Maximum iterations abs.tol: Absolute convergence tolerance function returns list containing: - par: Named vector fitted parameters - objective: Final objective function value - convergence: Convergence status (0 = success) - scale_formula, shape_formula: Model formulas - variogram: Fitted variogram object (applicable) manual_params input fit_spatial_model() function allows users provide initial parameter estimates, offering greater control model optimization process. especially useful default estimates linear regression variogram fitting might suit specific use cases prior knowledge data suggests alternative starting values. using manual_params, user must supply list containing following required parameters: - beta1: Coefficients scale parameter linear model - beta2: Coefficients shape parameter linear model - gamma: Coefficient regulating relationship shape scale parameters - log_sigma2: Log-transformed variance Gaussian process - log_phi: Log-transformed spatial range parameter, derived variogram fitting user input - log_tau2_1: Log-transformed nugget effect Gaussian process manual_params provided, function derives values using default methods, including linear regression beta1 beta2 empirical variogram log_phi. However, manual_params supplied, overrides defaults, enabling advanced users refine model initialization replicate earlier analyses exact parameter values. parameters serve different modeling purposes: Fixed Effects Parameters (beta1, beta2): Control relationship covariates gamma distribution parameters Length must match number covariates Typically estimated initial linear models Spatial Parameters (log_sigma2, log_phi): Control spatial correlation structure log_sigma2: Determines strength spatial effects log_phi: Controls effective range spatial correlation Error Correlation Parameters (gamma, log_tau2_1): gamma: Links shape scale parameters log_tau2_1: Accounts measurement uncertainty specifying manual parameters, consider: - Parameter scales (log-transformed) - Relationship data’s spatial structure - Computational stability (avoid extreme values) - Previous successful model fits control_params can adjusted alongside manual_params fine-tune optimization process: ’s technical implementation:","code":"fit_spatial_model(   country_code,   data,   scale_outcome = \"log_scale\",   shape_outcome = \"log_shape\",   covariates = \"urban\",   cpp_script_name = \"02_scripts/model\",   output_dir = \"03_outputs/3a_model_outputs\" ) control_params = list( trace = 3,        # Higher values show more optimization details maxit = 2000,     # Increase for complex spatial structures abs.tol = 1e-10,  # Stricter convergence criteria rel.tol = 1e-8    # Relative convergence tolerance ) fit_spatial_model(   data = survey_data,   scale_outcome = \"log_scale\",   shape_outcome = \"log_shape\",   covariates = \"urban\",   cpp_script_name = \"02_scripts/model\",   manual_params = list(     beta1 = c(0.5, -0.3),     beta2 = c(0.2, 0.1),     gamma = 0.8,     log_sigma2 = log(0.5),     log_phi = log(100),     log_tau2_1 = log(0.1)   ),   control_params = list(     trace = 3,     maxit = 2000,     abs.tol = 1e-10   ) )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"ii--create_prediction_data","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3ii. create_prediction_data()","title":"Using AgePopDenom","text":"function builds gridded dataset ~5 km resolution, merging population rasters, urban-rural classification, admin boundaries. Ensures cell linked proper covariates. Creates regular grid predictions. Parameters: country_code: ISO3 country code country_shape: sf object country boundary pop_raster: Population density raster ur_raster: Urban/rural classification raster adm2_shape: Administrative boundaries (sf object) cell_size: Grid resolution meters ignore_cache: Whether regenerate existing grids output_dir: Output directory grid data grid includes: - Centroid coordinates - Population values - Urban/rural classification - Administrative unit IDs","code":"create_prediction_data(   country_code,   country_shape,   pop_raster,   ur_raster,   adm2_shape,   cell_size = 5000,   ignore_cache = FALSE,   output_dir = \"03_outputs/3a_model_outputs\" )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"iii-generate_gamma_predictions","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3iii generate_gamma_predictions()","title":"Using AgePopDenom","text":"function uses fitted model parameters simulate Gamma distributions unobserved locations. Produces shape scale estimates plus uncertainties. Parameters: - country_code: ISO3 country code - age_param_data: Fitted parameters survey locations - model_params: List model parameters fit_spatial_model() - predictor_data: Grid cells prediction - shapefile: Administrative boundaries - cell_size: Grid resolution - n_sim: Number Monte Carlo simulations - ignore_cache: Whether use cached predictions - output_dir: Output directory Returns: - Predicted shape scale parameters","code":"generate_gamma_predictions(   country_code,   age_param_data,   model_params,   predictor_data,   shapefile,   cell_size = 5000,   n_sim = 5000,   ignore_cache = FALSE,   output_dir = \"03_outputs/3a_model_outputs\" )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"iv--generate_gamma_raster_plot","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3iv. generate_gamma_raster_plot()","title":"Using AgePopDenom","text":"function converts shape, scale, derived mean-age predictions rasters. Creates exploratory maps validation visual inspection. Parameters: - predictor_data: Grid cell data - pred_list: Prediction results - country_code: ISO3 country code - output_dir: Output directory - save_raster: Whether save raster files Produces: - Shape parameter raster - Scale parameter raster - Mean age raster","code":"generate_gamma_raster_plot(   predictor_data,   pred_list,   country_code,   output_dir = \"03_outputs/3b_visualizations\",   save_raster = TRUE )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"v--generate_age_pop_table","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3v. generate_age_pop_table()","title":"Using AgePopDenom","text":"function computes age-specific population counts applying Gamma-based proportions population rasters. Aggregates counts proportions selected administrative levels (e.g., district, region). Parameters: - predictor_data: Grid cell data - scale_pred, shape_pred: Predicted parameters - country_code: ISO3 country code - age_range: Vector min/max ages - age_interval: Age grouping interval - ignore_cache: Whether use cached results - output_dir: Output directory Produces two data frames: - prop_df: Age proportions uncertainty - pop_df: Population counts uncertainty","code":"generate_age_pop_table(   predictor_data,   scale_pred,   shape_pred,   country_code,   age_range = c(0, 99),   age_interval = 1,   ignore_cache = FALSE,   output_dir = \"03_outputs/3c_table_outputs\" )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"vi--generate_age_pyramid_plot","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3vi. generate_age_pyramid_plot()","title":"Using AgePopDenom","text":"function creates population pyramids (either counts proportions) visualizing demographic structures across user-defined geographic units. Parameters: - dataset: List containing prop_df pop_df - country_code: ISO3 country code - output_dir: Output directory - fill_high, fill_low: Color gradient endpoints - line_color: Bar outline color - break_axis_by: Age axis interval Creates: - list containing proportion count plots.","code":"generate_age_pyramid_plot(   dataset,   country_code,   output_dir = \"03_outputs/3b_visualizations\" )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"vii--process_final_population_data","dir":"Articles","previous_headings":"Workflow Overview > 3. Run the Full Workflow","what":"3vii. process_final_population_data()","title":"Using AgePopDenom","text":"function summarizes final outputs Excel CSV files. Allows users retrieve final aggregated counts, proportions, uncertainties reporting. Parameters: - input_dir: Directory containing results - excel_output_file: Path Excel outpu Produces: - function writes Excel spreadhseet six sheets containing population counts proportions different administrative levels (country, region, district). allowing pass parameters underlying functions, run_full_workflow() offers flexibility efficiency managing geostatistical modeling process. sub-function within workflow accepts variety parameters, enabling advanced users tailor workflow specific needs. parameters support customization datasets, modeling approaches (including initial model parameters additional covariates), grid resolutions, output formats, caching options. level control ensures workflow aligns specific analytical requirements user.","code":"process_final_population_data(   input_dir = \"03_outputs/3c_table_outputs\",   excel_output_file = \"03_outputs/3d_compiled_results/age_pop_denom_compiled.xlsx\" )"},{"path":"https://truenomad.github.io/AgePopDenom/articles/using_agepopdenom.html","id":"example-gambia","dir":"Articles","previous_headings":"Workflow Overview","what":"Example: Gambia","title":"Using AgePopDenom","text":"demonstrate AgePopDenom, provide example workflow using simulated DHS-like data Gambia. enables users replicate fine-scale age-structured population modeling locally without requiring restricted data access. example covers directory setup, dummy data simulation, running full modeling workflow. detailed information advanced usage (e.g., integrating additional covariates, applying user-supplied rasters), consult function-specific help files. hope package empowers reliably estimate age-structured population counts diverse contexts finer geographic scales previously feasible.","code":"init(   r_script_name = \"full_pipeline.R\",   cpp_script_name = \"model.cpp\",   open_r_script = FALSE )  # set up country code cntry_code = \"GMB\"  # Gather and process datasets ---------------------------------------  # Set parameters for simulation total_population <- 266 urban_proportion <- 0.602 total_coords <- 266 lon_range <- c(-16.802, -13.849) lat_range <- c(13.149, 13.801) mean_web_x <- -1764351 mean_web_y <- 1510868  # Simulate processed survey dataset for Gambia set.seed(123) df_gambia <- NULL df_gambia$age_param_data <- dplyr::tibble(   country = \"Gambia\",   country_code_iso3 = \"GMB\",   country_code_dhs = \"GM\",    year_of_survey = 2024,   id_coords = rep(1:total_coords, length.out = total_population),   lon = runif(total_population, lon_range[1], lon_range[2]),   lat = runif(total_population, lat_range[1], lat_range[2]),    web_x = rnorm(total_population, mean_web_x, 50000),   web_y = rnorm(total_population, mean_web_y, 50000),   log_scale = rnorm(total_population, 2.82, 0.2),   log_shape = rnorm(total_population, 0.331, 0.1),   urban = rep(c(1,0), c(     round(total_population * urban_proportion),      total_population - round(total_population * urban_proportion))),   b1 = rnorm(total_population, 0.0142, 0.002),   c = rnorm(total_population, -0.00997, 0.001),   b2 = rnorm(total_population, 0.00997, 0.002),   nsampled = sample(180:220, total_population, replace = TRUE))  # save as processed dhs data saveRDS(   df_gambia,   file = here::here(     \"01_data\", \"1a_survey_data\", \"processed\",      \"dhs_pr_records_combined.rds\"))  # Download shapefiles download_shapefile(cntry_code)  # Download population rasters from worldpop download_pop_rasters(cntry_code)  # Extract urban extent raster extract_afurextent()  # Run models and get outputs ------------------------------------------  # Run the full model workflow run_full_workflow(cntry_code)"},{"path":"https://truenomad.github.io/AgePopDenom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mohamed . Yusuf. Author, maintainer.            mohamedayusuf87@gmail.com Victor . Alegana. Author. Chris Nnanatu. Author.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yusuf M, Alegana V, Nnanatu C (2025). AgePopDenom: Package model fine-scale age-structured population data. R package version 0.1.0, https://truenomad.github.io/AgePopDenom/.","code":"@Manual{,   title = {AgePopDenom: Package to model fine-scale age-structured population data},   author = {Mohamed A. Yusuf and Victor A. Alegana and Chris Nnanatu},   year = {2025},   note = {R package version 0.1.0},   url = {https://truenomad.github.io/AgePopDenom/}, }"},{"path":[]},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"what-is-agepopdenom","dir":"","previous_headings":"","what":"What is AgePopDenom?","title":"Package to model fine-scale age-structured population data","text":"AgePopDenom R package designed facilitate generation fine-scale, age-structured population denominators public health decision-making service delivery. combining census household survey data novel parameter-based geostatistical modeling approach, package produces high-resolution (5km x 5km) population estimates disaggregated age. Key features include: Automated data retrieval processing Geostatistical modeling age structures High-resolution population predictions Age-specific population denominators Visualization diagnostic tools","code":""},{"path":[]},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"system-requirements","dir":"","previous_headings":"Installation","what":"System Requirements","title":"Package to model fine-scale age-structured population data","text":"installing AgePopDenom, ensure system meets following requirements: R version: >= 4.1.0 C++ compiler: C++17 compatible TMB (Template Model Builder)","code":""},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"platform-specific-setup","dir":"","previous_headings":"Installation > System Requirements","what":"Platform-Specific Setup","title":"Package to model fine-scale age-structured population data","text":"Windows Install Rtools (matches R version): FALSE, download install Rtools : CRAN Rtools macOS Install Command Line Tools: Alternatively, install gcc via Homebrew: Linux (Ubuntu/Debian) Update system install necessary packages:","code":"# Check if Rtools is installed and properly configured pkgbuild::has_build_tools() xcode-select --install brew install gcc sudo apt-get update sudo apt-get install build-essential libxml2-dev"},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"agepopdenom-installation","dir":"","previous_headings":"Installation","what":"AgePopDenom installation","title":"Package to model fine-scale age-structured population data","text":"setup complete, follow instructions download AgePopDenom Note: AgePopDenom currently development. available CRAN, able install using following command: get development version GitHub, use: load R:","code":"# install.packages(\"AgePopDenom\") # install.packages(\"devtools\") devtools::install_github(\"truenomad/AgePopDenom\") library(AgePopDenom)"},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"core-functions","dir":"","previous_headings":"Installation","what":"Core Functions","title":"Package to model fine-scale age-structured population data","text":"Initialize project structure: Download required data: Run full analysis:","code":"AgePopDenom::init() # Example for Kenya and Uganda countries <- c(\"KEN\", \"UGA\")  # Get DHS data AgePopDenom::download_dhs_datasets(countries, email = \"your_email@example.com\")  # Get spatial data AgePopDenom::download_shapefile(countries) AgePopDenom::download_pop_rasters(countries) AgePopDenom::run_full_workflow(countries)"},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Package to model fine-scale age-structured population data","text":"detailed documentation examples, visit package website.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/index.html","id":"support-and-contributions","dir":"","previous_headings":"","what":"Support and Contributions","title":"Package to model fine-scale age-structured population data","text":"support, bug reports, feature requests, please contact: Mo Yusuf (Package Developer)Email: moyusuf@.intAffiliation: World Health Organization Regional Office Africa, P.O. Box 06, Cite du Djoue, Brazzaville, Congo Alternatively, open issue GitHub repository. welcome contributions community improve AgePopDenom.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/aggregate_and_extract_gamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Individual Survey Data and Extract Gamma Parameters by Location — aggregate_and_extract_gamma","title":"Aggregate Individual Survey Data and Extract Gamma Parameters by Location — aggregate_and_extract_gamma","text":"script aggregates individual Survey data location level extracts gamma parameters locations.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/aggregate_and_extract_gamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Individual Survey Data and Extract Gamma Parameters by Location — aggregate_and_extract_gamma","text":"","code":"aggregate_and_extract_gamma(   data,   lat_column = \"lat\",   long_column = \"long\",   age_column = \"ageyrs\",   urban_column = \"urban\" )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/aggregate_and_extract_gamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Individual Survey Data and Extract Gamma Parameters by Location — aggregate_and_extract_gamma","text":"data Data frame containing individual-level age data coordinates urban/rural classification. lat_column Column name latitude coordinates (default: \"lat\") long_column Column name longitude coordinates (default: \"long\") age_column Column name age values (default: \"ageyrs\") urban_column Column name urban/rural classification (default: \"urban\")","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/aggregate_and_extract_gamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Individual Survey Data and Extract Gamma Parameters by Location — aggregate_and_extract_gamma","text":"List containing: outlier_free_data: Original data added spatial                  coordinates, outliers removed, clusters less                  10 samples removed age_param_data: Location-level gamma parameters columns:                 lon, lat, web_x, web_y, log_scale, log_shape, urban,                 b1, c, b2, nsampled","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/compute_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Covariance Matrix for Spatial Model — compute_cov","title":"Compute Covariance Matrix for Spatial Model — compute_cov","text":"function computes block covariance matrix bivariate spatial model age-structured parameters.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/compute_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Covariance Matrix for Spatial Model — compute_cov","text":"","code":"compute_cov(   gamma,   sigma2,   phi,   u_dist,   n_x,   tau2_1 = 1,   tau2_2 = 1,   age_param_data )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/compute_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Covariance Matrix for Spatial Model — compute_cov","text":"gamma Correlation parameter two spatial processes sigma2 Variance parameter spatial processes phi Range parameter spatial correlation u_dist Distance matrix locations n_x Number spatial locations tau2_1 Variance parameter first process (default = 1) tau2_2 Variance parameter second process (default = 1) age_param_data List containing age-structured parameters: b1: Vector age parameters first process b2: Vector age parameters second process c: Vector cross-process age parameters","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/compute_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Covariance Matrix for Spatial Model — compute_cov","text":"sparse symmetric matrix dimension 2n_x × 2n_x","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_prediction_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate or Load Cached Predictors Data — create_prediction_data","title":"Generate or Load Cached Predictors Data — create_prediction_data","text":"function creates predictors data based spatial inputs loads cached predictors data file already exists. saves generated data specified directory reuse provides progress updates.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_prediction_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate or Load Cached Predictors Data — create_prediction_data","text":"","code":"create_prediction_data(   country_code,   country_shape,   pop_raster,   ur_raster,   adm2_shape,   cell_size = 5000,   ignore_cache = FALSE,   output_dir = here::here(\"03_outputs\", \"3a_model_outputs\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_prediction_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate or Load Cached Predictors Data — create_prediction_data","text":"country_code string representing country code (e.g., \"KEN\"). country_shape `sf` object representing country's administrative boundaries. pop_raster `terra` raster object representing population raster. ur_raster `terra` raster object representing urban extent raster. adm2_shape `sf` object representing administrative level 2 boundaries. cell_size integer specifying cell size prediction grid meters (default 5000). ignore_cache boolean input set determine whether ignore existing cache write . Default set FALSE. output_dir string specifying directory predictors data file saved (default \"03_outputs/3a_model_outputs\").","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_prediction_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate or Load Cached Predictors Data — create_prediction_data","text":"data object (`predictor_data`) containing generated predictors.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_prediction_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate or Load Cached Predictors Data — create_prediction_data","text":"","code":"if (FALSE) { # \\dontrun{ predictors <- create_prediction_data(   country_code = \"KEN\",   country_shape = country_sf,   pop_raster = pop_raster,   ur_raster = urban_raster,   adm2_shape = adm2_sf,   cell_size = 5000,   output_dir = \"03_outputs/3a_model_outputs\" ) } # }"},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_project_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Standardized Project Folder Structure — create_project_structure","title":"Create a Standardized Project Folder Structure — create_project_structure","text":"function creates standardized folder structure organizing data, scripts, outputs within project directory. ensures consistency reproducibility data-related workflows.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_project_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Standardized Project Folder Structure — create_project_structure","text":"","code":"create_project_structure(base_path = here::here())"},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_project_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Standardized Project Folder Structure — create_project_structure","text":"base_path character string specifying root directory folder structure created. Defaults `::()` use current project directory.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_project_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Standardized Project Folder Structure — create_project_structure","text":"Creates directories specified `base_path`. Returns   invisible `NULL` prints messages folder creation status.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_project_structure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Standardized Project Folder Structure — create_project_structure","text":"function generates following folder structure:","code":"# 01_data/ # ├── 1a_survey_data/ # │   ├── processed/ # │   └── raw/ # ├── 1b_rasters/ # │   ├── urban_extent/ # │   └── pop_raster/ # ├── 1c_shapefiles/ # 02_scripts/ # 03_outputs/ # ├── 3a_model_outputs/ # ├── 3b_visualizations/ # ├── 3c_table_outputs/ # └── 3d_compiled_results/"},{"path":"https://truenomad.github.io/AgePopDenom/reference/create_project_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Standardized Project Folder Structure — create_project_structure","text":"","code":"# Create the project folder structure in the current directory # create_project_structure()  # Create the folder structure in a specific directory # create_project_structure(base_path = \"~/my_project\")"},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Main Function to Download DHS Datasets — download_dhs_datasets","title":"Main Function to Download DHS Datasets — download_dhs_datasets","text":"Downloads latest PR (household) GE (geographic) DHS datasets  specified countries.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main Function to Download DHS Datasets — download_dhs_datasets","text":"","code":"download_dhs_datasets(   country_codes,   cache_path = here::here(\"01_data\", \"1a_survey_data\", \"raw\"),   output_dir_root = here::here(\"01_data\", \"1a_survey_data\", \"raw\"),   email,   project,   verbose = TRUE )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main Function to Download DHS Datasets — download_dhs_datasets","text":"country_codes character vector ISO3 country codes. cache_path character string specifying cache path RDHS. output_dir_root character string specifying root directory output. email character string. Email registered DHS. project character string. Project name registered DHS. verbose Logical rdhs setup messages printed dataset download progress bars shown.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main Function to Download DHS Datasets — download_dhs_datasets","text":"Invisibly returns list downloaded dataset filenames.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets_by_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Download DHS Datasets for Specified Countries — download_dhs_datasets_by_type","title":"Download DHS Datasets for Specified Countries — download_dhs_datasets_by_type","text":"Downloads DHS datasets specified survey type file type given countries.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets_by_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download DHS Datasets for Specified Countries — download_dhs_datasets_by_type","text":"","code":"download_dhs_datasets_by_type(   country_codes,   survey_type,   file_type,   file_format,   output_dir,   clear_cache = TRUE )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets_by_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download DHS Datasets for Specified Countries — download_dhs_datasets_by_type","text":"country_codes character vector ISO3 country codes. survey_type character string. Type DHS survey (e.g., \"DHS\"). file_type character string. Type file (e.g., \"PR\" \"GE\"). file_format character string. Format file (e.g., \"DT\", \"FLAT\"). output_dir character string specifying directory save downloaded datasets. clear_cache Logical. Whether clear cache downloading. Default TRUE.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_dhs_datasets_by_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download DHS Datasets for Specified Countries — download_dhs_datasets_by_type","text":"Invisibly returns vector downloaded dataset filenames.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_pop_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Download population rasters for given country codes. — download_pop_rasters","title":"Download population rasters for given country codes. — download_pop_rasters","text":"function attempts download population rasters WorldPop specified country codes. `dest_dir` provided, file paths generated based given country codes saved current project directory (using `::()`). first checks local file already exists, , skip downloading.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_pop_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download population rasters for given country codes. — download_pop_rasters","text":"","code":"download_pop_rasters(   country_codes,   dest_dir = here::here(\"01_data\", \"1b_rasters\", \"pop_raster\"),   quiet = FALSE )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_pop_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download population rasters for given country codes. — download_pop_rasters","text":"country_codes character vector ISO3 country codes. dest_dir character vector file paths saving rasters. NULL, defaults \"<cc>_ppp_2020_constrained2.tif\" project dir. quiet Logical; TRUE, suppress status messages.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_pop_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download population rasters for given country codes. — download_pop_rasters","text":"Invisibly returns vector downloaded file paths  (NA found).","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_pop_rasters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download population rasters for given country codes. — download_pop_rasters","text":"function tries baseline URL (BSGM) country code. file found , tries secondary URL (maxar_v1). neither location provides file, returns NA prompts check WorldPop website directly.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_pop_rasters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download population rasters for given country codes. — download_pop_rasters","text":"","code":"# download_pop_rasters(c(\"DZA\", \"KEN\"))"},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"Download WHO ADM2 Boundaries with Partial Update — download_shapefile","title":"Download WHO ADM2 Boundaries with Partial Update — download_shapefile","text":"function ensures specified shapefile (`dest_file`) contains boundaries requested ISO3 codes (`country_codes`). dynamically Downloades missing codes appends file, ensuring duplication.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_shapefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download WHO ADM2 Boundaries with Partial Update — download_shapefile","text":"","code":"download_shapefile(   country_codes,   dest_file = here::here(\"01_data\", \"1c_shapefiles\", \"district_shape.gpkg\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_shapefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download WHO ADM2 Boundaries with Partial Update — download_shapefile","text":"country_codes Character vector ISO3 country codes (e.g. c(\"KEN\",\"UGA\")). dest_file File path data saved (default: \"01_data/1c_shapefiles/district_shape.gpkg\").","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/download_shapefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download WHO ADM2 Boundaries with Partial Update — download_shapefile","text":"`sf` object combined boundaries requested country   codes.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_afurextent.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Urban/Rural Extent Raster — extract_afurextent","title":"Extract Urban/Rural Extent Raster — extract_afurextent","text":"Extracts `afurextent.asc` raster file package's `inst/extdata` directory specified destination.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_afurextent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Urban/Rural Extent Raster — extract_afurextent","text":"","code":"extract_afurextent(   dest_dir = here::here(\"01_data\", \"1b_rasters\", \"urban_extent\"),   overwrite = FALSE )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_afurextent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Urban/Rural Extent Raster — extract_afurextent","text":"dest_dir character string specifying directory save extracted raster file. overwrite Logical. Whether overwrite existing file destination directory. Default FALSE.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_afurextent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Urban/Rural Extent Raster — extract_afurextent","text":"character string representing full path extracted raster   file.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_afurextent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Urban/Rural Extent Raster — extract_afurextent","text":"function extracts `afurextent.asc` file package's `extdata` directory, stored compressed `.zip` file. requires `raster` package load raster file.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_afurextent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Urban/Rural Extent Raster — extract_afurextent","text":"","code":"# Extract the raster to a temporary directory # raster_path <- extract_afurextent(tempdir(), overwrite = TRUE) # print(raster_path)"},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_age_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Parameters and Optimization Details with Log-Likelihood — extract_age_param","title":"Extract Parameters and Optimization Details with Log-Likelihood — extract_age_param","text":"Reads files matching pattern \"age_param_spatial_urban\" specified directory, extracts country name, parameter values, optimization details, combines results data frame, optionally saves output file.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_age_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Parameters and Optimization Details with Log-Likelihood — extract_age_param","text":"","code":"extract_age_param(   dir_path = here::here(\"03_outputs\", \"3a_model_outputs\"),   output_file = here::here(\"03_outputs\", \"3d_compiled_results\", \"model_params.csv\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_age_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Parameters and Optimization Details with Log-Likelihood — extract_age_param","text":"dir_path character string specifying directory containing files. output_file character string specifying path save output data frame. NULL, output saved.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_age_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Parameters and Optimization Details with Log-Likelihood — extract_age_param","text":"data frame extracted parameters, log-likelihood,         optimization details.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_age_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Parameters and Optimization Details with Log-Likelihood — extract_age_param","text":"","code":"# params_df <- extract_age_param( #  dir_path = \"03_outputs/3a_model_outputs\", #  output_file = \"03_outputs/age_parameters.csv\" # )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_betas.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Beta Parameters from Model Output — extract_betas","title":"Extract Beta Parameters from Model Output — extract_betas","text":"function extracts beta coefficients model parameter object, separating beta1 beta2 components.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_betas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Beta Parameters from Model Output — extract_betas","text":"","code":"extract_betas(   params_result,   params = c(\"gamma\", \"log_sigma2\", \"log_phi\", \"log_tau1\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_betas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Beta Parameters from Model Output — extract_betas","text":"params_result model parameter object containing parameter estimates params character vector specifying parameter names, defaults c(\"gamma\", \"log_sigma2\", \"log_phi\", \"log_tau1\")","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_betas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Beta Parameters from Model Output — extract_betas","text":"list two components: beta1: First set beta coefficients beta2: Second set beta coefficients","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/extract_betas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Beta Parameters from Model Output — extract_betas","text":"function assumes parameter vector contains beta coefficients followed model parameters. splits betas two equal groups removing last 4 parameters.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"Fits spatial model age parameters using Template Model Builder (TMB) C++. model incorporates spatial correlation distance matrices handles scale shape parameters simultaneously. Progress tracked clear status updates. Can optionally load cache.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"","code":"fit_spatial_model(   data,   country_code = NULL,   scale_outcome,   shape_outcome,   covariates,   cpp_script_name,   verbose = TRUE,   control_params = list(trace = 2),   manual_params = NULL,   output_dir = NULL,   ignore_cache = FALSE )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"data data frame containing response variables, covariates, spatial coordinates (web_x, web_y) country_code Optional country code save/load cached model. Default NULL runs model without caching. scale_outcome Character string specifying column name scale parameter response variable shape_outcome Character string specifying column name shape parameter response variable covariates Character vector covariate names include scale shape models cpp_script_name Character string specifying name C++ file (without extension) containing TMB model definition verbose Logical indicating whether show progress updates. Default TRUE control_params List control parameters passed nlminb optimizer. Default: list(trace = 2) manual_params Optional list manual parameter values. NULL (default), initial parameters estimated linear regression. list contain: beta1: Vector coefficients scale model beta2: Vector coefficients shape model gamma: Scalar value (default 1.0) log_sigma2: Log sigma squared (default log(1.0)) log_phi: Log phi (estimated variogram) log_tau2_1: Log tau squared (default log(1.0)) output_dir Directory save cached models. used country_code provided. ignore_cache Whether ignore existing cache. Default FALSE.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"object class 'nlminb' containing: par - Optimized parameter values objective - Final value objective function convergence - Convergence code message - Convergence message iterations - Number iterations evaluations - Number function/gradient evaluations scale_formula - Formula used scale model shape_formula - Formula used shape model variogram - Fitted variogram model automap containing: range - Spatial correlation range parameter psill - Partial sill (structured variance) nugget - Nugget effect (unstructured variance) kappa - Smoothness parameter Matern models","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"function performs following steps progress tracking: 1. Fits initial linear models scale shape parameters 2. Calculates spatial distance matrix web coordinates 3. Estimates optimal phi parameter using variogram:    - Computes empirical variogram using automap    - Automatically selects best theoretical variogram model    - Range parameter used initialize spatial correlation    - Default range 100 used estimation fails 4. Compiles loads TMB C++ template 5. Optimizes joint likelihood using nlminb spatial correlation modeled using exponential variogram parameters estimated data. distance matrix computed web coordinates (web_x, web_y) used spatial covariance structure. C++ template implement joint spatial model parameters.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"Requires TMB package working C++ compiler. C++ template must properly structured TMB. automap package required variogram fitting.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/fit_spatial_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Spatial Model for Age Parameters using TMB — fit_spatial_model","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage fit <- fit_spatial_model(   data = my_data,   scale_outcome = \"scale_param\",   shape_outcome = \"shape_param\",   covariates = c(\"elevation\", \"temperature\"),   cpp_script_name = \"spatial_model\" )  } # }"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pop_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Age Population Tables — generate_age_pop_table","title":"Generate Age Population Tables — generate_age_pop_table","text":"Creates age-stratified population tables predictor data gamma distribution parameters. Supports parallel processing caching results.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pop_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Age Population Tables — generate_age_pop_table","text":"","code":"generate_age_pop_table(   predictor_data,   scale_pred,   shape_pred,   age_range = c(0, 99),   age_interval = 1,   country_code,   ignore_cache = FALSE,   output_dir,   n_cores = parallel::detectCores() - 2 )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pop_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Age Population Tables — generate_age_pop_table","text":"predictor_data Data frame containing population data columns: country, region, district, pop scale_pred Matrix scale parameters gamma distribution predictions shape_pred Matrix shape parameters gamma distribution predictions age_range Numeric vector length 2 specifying min max ages, default c(0,99) age_interval Numeric interval size age groups years, default 1 country_code Character ISO3 country code ignore_cache Logical whether ignore cached results, default FALSE output_dir Character path output directory n_cores Integer number cores parallel processing, default detectCores()-2","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pop_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Age Population Tables — generate_age_pop_table","text":"List containing two data frames:    - prop_df: Age-stratified population proportions uncertainty intervals    - pop_df: Age-stratified population counts uncertainty intervals","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pyramid_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Save Age Pyramid Plot — generate_age_pyramid_plot","title":"Generate and Save Age Pyramid Plot — generate_age_pyramid_plot","text":"function processes input dataset compute age distribution, generates age pyramid plots region showing proportions counts, saves plots specified directory.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pyramid_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Save Age Pyramid Plot — generate_age_pyramid_plot","text":"","code":"generate_age_pyramid_plot(   dataset,   country_code,   output_dir,   line_color = \"#67000d\",   fill_high = \"#fee0d2\",   fill_low = \"#a50f15\",   break_axis_by = 10,   caption = paste0(\"Note: Total population includes \",     \"ages 99+, pyramid shows ages 0-99\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pyramid_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Save Age Pyramid Plot — generate_age_pyramid_plot","text":"dataset list containing two data frames: - prop_df: Population proportions data frame - pop_df: Population counts data frame columns `country`, `region`, `district`, columns ending \"mean\" country_code string representing country code (e.g., \"ken\"). output_dir string specifying directory plots saved. line_color string specifying color plot's lines. Default `\"#67000d\"`. fill_high string specifying fill color high values. Default `\"#fee0d2\"`. fill_low string specifying fill color low values. Default `\"#a50f15\"` break_axis_by break axis show less cluttered age groups. Default 10 caption string specifying caption text. Default \"Note: Total population includes ages 99+, pyramid shows ages 0-99\"","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pyramid_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and Save Age Pyramid Plot — generate_age_pyramid_plot","text":"list containing proportion count plots.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_age_pyramid_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate and Save Age Pyramid Plot — generate_age_pyramid_plot","text":"","code":"# generate_age_pyramid_plot( #  dataset = list(prop_df = prop_results, pop_df = pop_results), #  country_code = \"ken\", #  output_dir = \"03_outputs/3b_figures\" # )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate or Load Cached Gamma Predictions — generate_gamma_predictions","title":"Generate or Load Cached Gamma Predictions — generate_gamma_predictions","text":"function generates gamma parameter predictions using spatial model parameters predictors data, loads cached predictions file already exists. saves predictions specified directory provides progress updates.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate or Load Cached Gamma Predictions — generate_gamma_predictions","text":"","code":"generate_gamma_predictions(   country_code,   age_param_data,   model_params,   predictor_data,   shapefile,   cell_size = 5000,   n_sim = 10000,   ignore_cache = FALSE,   save_file = FALSE,   output_dir = here::here(\"03_outputs\", \"3a_model_outputs\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate or Load Cached Gamma Predictions — generate_gamma_predictions","text":"country_code string representing country code (e.g., \"KEN\"). age_param_data data frame tibble containing age parameter data. model_params fitted spatial model object (e.g., `spat_model_param`). predictor_data data object containing predictors data. shapefile `sf` object representing country shape. cell_size integer specifying cell size prediction meters (default 5000). n_sim integer specifying number simulations predictions (default 10000). ignore_cache boolean input set determine whether ignore existing cache write . Default set FALSE. save_file boolean determine whetehr save prediction . Default FALSE requre lots space. output_dir string specifying directory predictions file saved (default \"03_outputs/3a_model_outputs\").","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate or Load Cached Gamma Predictions — generate_gamma_predictions","text":"data object (`gamma_prediction`) containing gamma parameter   predictions.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate or Load Cached Gamma Predictions — generate_gamma_predictions","text":"","code":"# gamma_results <- generate_gamma_predictions( #  country_code = \"KEN\", #  age_param_data = age_param_data, #  model_params = spat_model_param, #  predictor_data = predictor_data, #  shapefile = country_sf, #  cell_size = 5000, #  n_sim = 10000, # output_dir = \"03_outputs/3a_model_outputs\" #  )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_raster_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and Save Raster Plot for Gamma Predictions — generate_gamma_raster_plot","title":"Generate and Save Raster Plot for Gamma Predictions — generate_gamma_raster_plot","text":"function creates rasters prediction data, combines stack, saves faceted plot specified file.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_raster_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and Save Raster Plot for Gamma Predictions — generate_gamma_raster_plot","text":"","code":"generate_gamma_raster_plot(   predictor_data,   pred_list,   country_code,   output_dir,   save_raster = TRUE,   file_name_suffix = \"gamma_prediction_rasters\",   width = 2500,   height = 2000,   png_resolution = 300 )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_raster_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and Save Raster Plot for Gamma Predictions — generate_gamma_raster_plot","text":"predictor_data data frame containing `web_x` `web_y` coordinates associated prediction values. pred_list list containing predictions (`shape_hat`, `scale_hat`, `mean_age_pred`) creating rasters. country_code string representing lowercase country code, used naming output file. output_dir string specifying directory plot saved. save_raster logical input specifying whether save output . Default TRUE. file_name_suffix string specifying suffix file name (default \"gamma_prediction_rasters\"). width Numeric. Width output plot pixels (default: 2500). height Numeric. Height output plot pixels (default: 2000). png_resolution integer specifying resolution plot DPI (default: 300).","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_raster_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and Save Raster Plot for Gamma Predictions — generate_gamma_raster_plot","text":"path saved raster plot.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/generate_gamma_raster_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate and Save Raster Plot for Gamma Predictions — generate_gamma_raster_plot","text":"","code":"# raster_path <- generate_gamma_raster_plot( #   predictor_data = predictor_data, #   pred_list = pred_list, #   country_code = \"ken\", #   output_dir = \"03_outputs/3b_visualizations\" # )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Full Pipeline Script and Model Script — init","title":"Initialize Full Pipeline Script and Model Script — init","text":"Creates full pipeline R script model C++ script, saving appropriate folders within project directory structure. folder structure created using `AgePopDenom::create_project_structure()`. scripts contain example code downloading processing DHS data, shapefiles, running models.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Full Pipeline Script and Model Script — init","text":"","code":"init(   r_script_name = \"full_pipeline.R\",   cpp_script_name = \"model.cpp\",   path = here::here(),   open_r_script = TRUE,   setup_rscript = TRUE )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Full Pipeline Script and Model Script — init","text":"r_script_name Character. name R script file created. Defaults `\"full_pipeline.R\"`. cpp_script_name Character. name C++ script file created. Defaults `\"model.cpp\"`. path Character. directory create scripts. Defaults `::()`. open_r_script Logical. Whether open R script automatically RStudio (available). Defaults `TRUE`. setup_rscript Logical. Whether setup R script example code. Defaults `TRUE`.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Full Pipeline Script and Model Script — init","text":"Invisibly returns list containing: r_script_path: Path created R script cpp_script_path: Path created C++ script function also prints success messages upon script creation.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Full Pipeline Script and Model Script — init","text":"","code":"if (FALSE) { # \\dontrun{ # Create scripts in current directory init()  # Create scripts in custom directory with specific names init(r_script_name = \"my_pipeline.R\",      cpp_script_name = \"my_model.cpp\",      path = \"project_dir\") } # }"},{"path":"https://truenomad.github.io/AgePopDenom/reference/install_suggested_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Initialization and Dependency Check — install_suggested_packages","title":"Package Initialization and Dependency Check — install_suggested_packages","text":"function checks suggested packages prompts user install missing ones needed full functionality. handles CRAN GitHub packages.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/install_suggested_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Initialization and Dependency Check — install_suggested_packages","text":"","code":"install_suggested_packages(libname = NULL, pkgname = NULL)"},{"path":"https://truenomad.github.io/AgePopDenom/reference/install_suggested_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Initialization and Dependency Check — install_suggested_packages","text":"libname library name package installed (used) pkgname name package loaded (used)","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/install_suggested_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Package Initialization and Dependency Check — install_suggested_packages","text":"Returns NULL invisibly. function's main effects : Checking missing suggested packages Displaying missing packages user Installing packages user agrees Providing feedback installation success/failure","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/install_suggested_packages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Initialization and Dependency Check — install_suggested_packages","text":"function maintains predefined list suggested packages checks installed. missing packages, prompts user installation interactive sessions. Special handling included GitHub packages like esri2sf'. function uses 'cli' user communication handles errors gracefully installation attempts. non-interactive sessions, skips installation returns warning.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/install_suggested_packages.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Package Initialization and Dependency Check — install_suggested_packages","text":"- Function requires interactive session package installation - functionality may limited suggested packages installed - Installation errors caught reported stop execution","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/log_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood Function for Spatial Model — log_lik","title":"Log-Likelihood Function for Spatial Model — log_lik","text":"Computes log-likelihood spatial statistical model covariance structure determined parameters including spatial decay variance.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/log_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood Function for Spatial Model — log_lik","text":"","code":"log_lik(   par,   p1,   p2,   d1,   d2,   y,   u_dist,   n_x,   tau2_1 = 1,   tau2_2 = 1,   age_param_data )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/log_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood Function for Spatial Model — log_lik","text":"par numeric vector parameters estimate. vector contains: par[1:p1]: Coefficients fixed effects dataset 1   (\\(\\beta_1\\)). par[(p1 + 1):(p1 + p2)]: Coefficients fixed effects   dataset 2 (\\(\\beta_2\\)). par[p1 + p2 + 1]: Spatial decay parameter (\\(\\gamma\\)). par[p1 + p2 + 2]: Log variance parameter   (\\(\\sigma^2\\)). par[p1 + p2 + 3]: Log range parameter (\\(\\phi\\)). p1 integer. number fixed-effect parameters dataset 1. p2 integer. number fixed-effect parameters dataset 2. d1 numeric matrix. Design matrix dataset 1 used model mean structure. d2 numeric matrix. Design matrix dataset 2 used model mean structure. y numeric vector. Observed response variable, including datasets. u_dist numeric matrix. Distance matrix spatial locations. n_x integer. number unique spatial locations. tau2_1 Variance parameter first process (default = 1) tau2_2 Variance parameter second process (default = 1) age_param_data numeric matrix vector. Additional parameters specific age-based modeling.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/log_lik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood Function for Spatial Model — log_lik","text":"numeric scalar. computed log-likelihood value.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/log_lik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Likelihood Function for Spatial Model — log_lik","text":"log-likelihood computed : $$ -0.5 \\left[ \\log(\\det(M)) + (y - \\mu)^T M^{-1} (y - \\mu) \\right] $$ : \\(M\\) covariance matrix, computed using compute_cov. \\(\\mu\\) mean structure, determined design matrices    d1, d2 coefficients \\(\\beta_1, \\beta_2\\). covariance matrix \\(M\\) computed using spatial parameters  (\\(\\gamma, \\sigma^2, \\phi\\)) distance matrix u_dist.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/log_lik.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Log-Likelihood Function for Spatial Model — log_lik","text":"function requires helper function, compute_cov, compute  covariance matrix based spatial parameters.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/predict_gamma_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Gamma Distribution Parameters for Spatial Grid — predict_gamma_params","title":"Predict Gamma Distribution Parameters for Spatial Grid — predict_gamma_params","text":"function predicts scale shape parameters Gamma distribution across spatial grid using bivariate spatial model.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/predict_gamma_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Gamma Distribution Parameters for Spatial Grid — predict_gamma_params","text":"","code":"predict_gamma_params(   age_param_data,   predictor_data,   model_params,   shapefile,   cell_size = 5000,   n_sim = 5000 )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/predict_gamma_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Gamma Distribution Parameters for Spatial Grid — predict_gamma_params","text":"age_param_data data frame containing: web_x, web_y: Spatial coordinates urban: Urban/rural indicator log_scale: Log scale parameter observed locations log_shape: Log shape parameter observed locations predictor_data data object containing predictors data. model_params list containing model parameters: par: Named vector gamma, log_sigma2, log_phi, log_tau1 Additional parameters extracting beta coefficients shapefile sf object defining boundary predictions cell_size Numeric. Grid cell size meters (default: 5000) n_sim Integer. Number simulations prediction (default: 5000)","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/predict_gamma_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Gamma Distribution Parameters for Spatial Grid — predict_gamma_params","text":"list containing: country_grid: Data frame prediction grid coordinates scale_pred: Matrix simulated scale parameters shape_pred: Matrix simulated shape parameters","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_dhs_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","title":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","text":"function processes DHS (Demographic Health Survey) data : 1. Reading RDS files shapefiles country. 2. Merging demographic data geographic information. 3. Cleaning aggregating data. 4. Extracting gamma parameters age-related analysis.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_dhs_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","text":"","code":"process_dhs_data(   rds_dir = here::here(\"01_data\", \"1a_survey_data\", \"raw\", \"pr_records\"),   shp_dir = here::here(\"01_data\", \"1a_survey_data\", \"raw\", \"shapefiles\"),   output_path = here::here(\"01_data\", \"1a_survey_data\", \"processed\",     \"dhs_pr_records_combined.rds\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_dhs_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","text":"rds_dir Character. Path directory containing raw RDS files. shp_dir Character. Path directory containing shapefiles. output_path Character. Path save final processed dataset RDS file.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_dhs_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","text":"None. Saves final combined dataset specified output path.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_dhs_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","text":"function loops RDS files, processes country's data merging demographic information shapefile data, computes gamma parameters age-related analysis. progress tracked displayed country. function also filters incomplete data (e.g., age values `98`) handles labelled data using `haven::zap_labels` function. final output includes two datasets: 1. Outlier-free data. 2. Aggregated age parameter data.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_dhs_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process DHS Data: Merge RDS Files with Shapefiles and Extract Gamma Parameters — process_dhs_data","text":"","code":"if (FALSE) { # \\dontrun{ process_dhs_data(   rds_dir = \"01_data/1a_survey_data/raw/pr_records\",   shp_dir = \"01_data/1a_survey_data/raw/shapefiles/\",   output_path = \"01_data/1a_survey_data/processed/dhs_pr_records_combined.rds\" ) } # }"},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_final_population_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Final Population Data — process_final_population_data","title":"Process Final Population Data — process_final_population_data","text":"Reads population proportion data RDS files, processes data generate age-group-based population summaries proportions different administrative levels (Country, Region, District), writes results Excel file separate sheets level metric.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_final_population_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Final Population Data — process_final_population_data","text":"","code":"process_final_population_data(   input_dir = here::here(\"03_outputs\", \"3c_table_outputs\"),   excel_output_file = here::here(\"03_outputs\", \"3d_compiled_results\",     \"age_pop_denom_compiled.xlsx\") )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_final_population_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Final Population Data — process_final_population_data","text":"input_dir character string specifying directory containing RDS files. Default \"03_outputs/3c_table_outputs\" project directory. excel_output_file character string specifying output Excel file path. Default \"03_outputs/3d_compiled_results/age_pop_denom_compiled.xlsx\" project directory.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_final_population_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Final Population Data — process_final_population_data","text":"None. function writes Excel file specified output   location six sheets containing population counts proportions   different administrative levels.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_final_population_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Final Population Data — process_final_population_data","text":"","code":"# process_final_population_data( #   input_dir = \"03_outputs/3c_table_outputs\", #   excel_output_file = \"03_outputs/afro_population_2020.xlsx\" # )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_gamma_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Gamma Prediction Results — process_gamma_predictions","title":"Process Gamma Prediction Results — process_gamma_predictions","text":"function processes gamma prediction results calculate mean age predictions, scale, shape parameters efficiently.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_gamma_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Gamma Prediction Results — process_gamma_predictions","text":"","code":"process_gamma_predictions(gamma_prediction)"},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_gamma_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Gamma Prediction Results — process_gamma_predictions","text":"gamma_prediction list containing `scale_pred` `shape_pred` matrices gamma prediction model.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_gamma_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Gamma Prediction Results — process_gamma_predictions","text":"list containing following elements:   - `mean_age_pred`: vector mean age predictions.   - `scale_hat`: vector mean scale parameters.   - `shape_hat`: vector mean shape parameters.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/process_gamma_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Gamma Prediction Results — process_gamma_predictions","text":"","code":"# results <- process_gamma_predictions( #            gamma_prediction = gamma_prediction) # print(results$mean_age_pred)"},{"path":"https://truenomad.github.io/AgePopDenom/reference/rasterize_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Rasterize Spatial Data — rasterize_data","title":"Rasterize Spatial Data — rasterize_data","text":"function converts spatial data x, y coordinates value field raster using specified resolution CRS.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/rasterize_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rasterize Spatial Data — rasterize_data","text":"","code":"rasterize_data(x_coords, y_coords, values, cell_size = 5000, crs, fun = mean)"},{"path":"https://truenomad.github.io/AgePopDenom/reference/rasterize_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rasterize Spatial Data — rasterize_data","text":"x_coords Numeric vector x-coordinates (e.g., longitude). y_coords Numeric vector y-coordinates (e.g., latitude). values Numeric vector values associated point. cell_size Numeric. Grid cell size meters (default: 5000). crs Character, coordinate reference system EPSG format (e.g., \"EPSG:3857\"). fun Function aggregate values cells (default `mean`).","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/rasterize_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rasterize Spatial Data — rasterize_data","text":"`terra::SpatRaster` object.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/rasterize_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rasterize Spatial Data — rasterize_data","text":"","code":"# rast <- rasterize_data( #   predictor_data$web_x, predictor_data$web_y, pred_list$shape_hat, #   cell_size = 5000, crs = \"EPSG:3857\" # )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/run_full_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Country-Specific Spatial Modeling Workflow with Logging — run_full_workflow","title":"Run Country-Specific Spatial Modeling Workflow with Logging — run_full_workflow","text":"function runs entire spatial modeling workflow given country code logs results. processes Survey data, fits spatial model, generates predictions, creates population tables, produces raster outputs. function modular can reused different countries minimal adjustments.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/run_full_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Country-Specific Spatial Modeling Workflow with Logging — run_full_workflow","text":"","code":"run_full_workflow(   country_code,   survey_data_path = here::here(\"01_data\", \"1a_survey_data\", \"processed\"),   survey_data_suffix = \"dhs_pr_records_combined.rds\",   shape_path = here::here(\"01_data\", \"1c_shapefiles\"),   shape_suffix = \"district_shape.gpkg\",   pop_raster_path = here::here(\"01_data\", \"1b_rasters\", \"pop_raster\"),   pop_raster_suffix = \"_ppp_2020_constrained.tif\",   ur_raster_path = here::here(\"01_data\", \"1b_rasters\", \"urban_extent\"),   ur_raster_suffix = \"afurextent.asc\",   output_paths = list(model = here::here(\"03_outputs\", \"3a_model_outputs\"), plot =     here::here(\"03_outputs\", \"3b_visualizations\"), raster = here::here(\"03_outputs\",     \"3c_raster_outputs\"), table = here::here(\"03_outputs\", \"3c_table_outputs\"), compiled     = here::here(\"03_outputs\", \"3d_compiled_results\"), excel = here::here(\"03_outputs\",     \"3d_compiled_results\", \"age_pop_denom_compiled.xlsx\"), log = here::here(\"03_outputs\",     \"3a_model_outputs\", \"modelling_log.rds\")),   model_params = list(cell_size = 5000, n_sim = 5000, ignore_cache = FALSE, age_range =     c(0, 99), age_interval = 1, return_prop = TRUE, scale_outcome = \"log_scale\",     shape_outcome = \"log_shape\", covariates = \"urban\", cpp_script =     here::here(\"02_scripts\", \"model\")),   return_results = FALSE,   n_cores = parallel::detectCores() - 2,   ... )"},{"path":"https://truenomad.github.io/AgePopDenom/reference/run_full_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Country-Specific Spatial Modeling Workflow with Logging — run_full_workflow","text":"country_code Character. ISO3 country code (e.g., \"TZA\"). survey_data_path Character. Path Survey data. Default: \"01_data/1a_survey_data/processed\". survey_data_suffix Character. Suffix Survey data files. Default: \"dhs_pr_records_combined.rds\". shape_path Character. Path shapefile data. Default: \"01_data/1c_shapefiles\". shape_suffix Character. Suffix shapefile data. Default: \"district_shape.gpkg\". pop_raster_path Character. Path population raster data. Default: \"01_data/1b_rasters/pop_raster\". pop_raster_suffix Character. Suffix population raster files. Default: \"_ppp_2020_constrained.tif\". ur_raster_path Character. Path urban-rural extent data. Default: \"01_data/1b_rasters/urban_extent\". ur_raster_suffix Character. Suffix urban-rural raster. Default: \"afurextent.asc\". output_paths List output paths: model: Path model outputs.        Default: \"03_outputs/3a_model_outputs\" plot: Path plots.        Default: \"03_outputs/3b_visualizations\" raster: Path rasters.        Default: \"03_outputs/3c_raster_outputs\" table: Path tables.        Default: \"03_outputs/3c_table_outputs\" compiled: Path compiled results.        Default: \"03_outputs/3d_compiled_results\" excel: Path Excel outputs.        Default:         \"03_outputs/3d_compiled_results/age_pop_denom_compiled.xlsx\" log: Path logs.        Default: \"03_outputs/3a_model_outputs/modelling_log.rds\" model_params List model parameters: cell_size: Cell size meters. Default: 5000 n_sim: Number simulations. Default: 5000 ignore_cache: Whether ignore cache. Default: FALSE age_range: Age range vector. Default: c(0, 99) age_interval: Age interval. Default: 1 return_prop: Return proportions. Default: TRUE scale_outcome: Scale outcome variable. Default: \"log_scale\" shape_outcome: Shape outcome variable. Default: \"log_shape\" covariates: Model covariates. Default: \"urban\" cpp_script: C++ script path. Default: \"02_scripts/model\" return_results Logical. Whether return results. Default: FALSE. n_cores Integer number cores parallel processing age population table, default detectCores()-2 ... Additional arguments passed subfunctions.","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/run_full_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Country-Specific Spatial Modeling Workflow with Logging — run_full_workflow","text":"return_results TRUE, list containing: spat_model_param: Fitted spatial model parameters predictor_data: Predictor dataset gamma_prediction: Generated gamma predictions pred_list: Processed gamma prediction results final_age_pop_table: Age-population table data final_pop: Compiled population data all_mod_params: Compiled model parameters","code":""},{"path":"https://truenomad.github.io/AgePopDenom/reference/run_full_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Country-Specific Spatial Modeling Workflow with Logging — run_full_workflow","text":"","code":"if (FALSE) { # \\dontrun{ # Run model for Tanzania with default parameters results <- run_full_workflow(country_code = \"TZA\")  # Run with custom parameters results <- run_full_workflow(   country_code = \"KEN\",   model_params = list(     cell_size = 2500,     n_sim = 10000,     covariates = c(\"urban\", \"elevation\")   ) ) } # }"}]
